import xml.etree.ElementTree as ET
import jaconv
import way3
import json

current_dir = way3.get_current_dir(__file__)

all_readings = [
    "あ",
    "あい",
    "あお",
    "あか",
    "あかつき",
    "あき",
    "あきら",
    "あく",
    "あけぼの",
    "あさ",
    "あさひ",
    "あし",
    "あじ",
    "あせ",
    "あたい",
    "あたま",
    "あつ",
    "あつし",
    "あと",
    "あな",
    "あに",
    "あね",
    "あぶら",
    "あま",
    "あみ",
    "あめ",
    "あや",
    "あらかじめ",
    "あらし",
    "あり",
    "あわ",
    "あん",
    "い",
    "いえ",
    "いき",
    "いく",
    "いけ",
    "いさお",
    "いさみ",
    "いし",
    "いしずえ",
    "いずみ",
    "いそ",
    "いた",
    "いただき",
    "いち",
    "いつ",
    "いと",
    "いぬ",
    "いぬい",
    "いね",
    "いのしし",
    "いのち",
    "いばら",
    "いま",
    "いもうと",
    "いや",
    "いろ",
    "いわ",
    "いん",
    "う",
    "うえ",
    "うし",
    "うず",
    "うた",
    "うたい",
    "うたげ",
    "うつわ",
    "うで",
    "うま",
    "うみ",
    "うめ",
    "うら",
    "うん",
    "え",
    "えい",
    "えき",
    "えだ",
    "えつ",
    "えのき",
    "えん",
    "お",
    "おう",
    "おうぎ",
    "おおとり",
    "おおむね",
    "おか",
    "おき",
    "おぎ",
    "おく",
    "おさむ",
    "おす",
    "おっと",
    "おつ",
    "おと",
    "おとうと",
    "おとこ",
    "おに",
    "おのれ",
    "おび",
    "おもい",
    "おもて",
    "おもむき",
    "おや",
    "おり",
    "おれ",
    "おろし",
    "おわり",
    "おん",
    "おんな",
    "か",
    "かい",
    "かえ",
    "かお",
    "かおり",
    "かおる",
    "かかり",
    "かがみ",
    "かき",
    "かく",
    "かけ",
    "かげ",
    "かさ",
    "かしわ",
    "かじ",
    "かす",
    "かすみ",
    "かず",
    "かぜ",
    "かた",
    "かたち",
    "かたな",
    "かち",
    "かつ",
    "かつら",
    "かて",
    "かね",
    "かば",
    "かぶ",
    "かぶと",
    "かべ",
    "かま",
    "かみ",
    "かみなり",
    "かめ",
    "かも",
    "から",
    "からだ",
    "かり",
    "かれ",
    "かわ",
    "かわら",
    "かん",
    "が",
    "がい",
    "がく",
    "がつ",
    "がら",
    "がわ",
    "がん",
    "き",
    "きく",
    "きさき",
    "きし",
    "きず",
    "きた",
    "きち",
    "きつ",
    "きぬ",
    "きも",
    "きゃく",
    "きゅう",
    "きょ",
    "きょう",
    "きょく",
    "きよし",
    "きり",
    "きわ",
    "きん",
    "ぎ",
    "ぎゃく",
    "ぎょう",
    "ぎん",
    "く",
    "くさ",
    "くさり",
    "くし",
    "くじら",
    "くすのき",
    "くすり",
    "くず",
    "くせ",
    "くち",
    "くちびる",
    "くつ",
    "くに",
    "くび",
    "くぼ",
    "くま",
    "くみ",
    "くも",
    "くら",
    "くらい",
    "くり",
    "くるま",
    "くれ",
    "くれない",
    "くろ",
    "くわ",
    "くん",
    "ぐ",
    "ぐう",
    "ぐん",
    "け",
    "けい",
    "けつ",
    "けむり",
    "けもの",
    "けん",
    "げい",
    "げき",
    "げん",
    "こ",
    "こい",
    "こう",
    "こうじ",
    "こえ",
    "こおり",
    "こく",
    "こころ",
    "こころざし",
    "こし",
    "こたえ",
    "こと",
    "こな",
    "こぶし",
    "こま",
    "こみ",
    "こめ",
    "こよみ",
    "これ",
    "ころも",
    "こん",
    "ご",
    "ごう",
    "ごく",
    "さ",
    "さい",
    "さか",
    "さかい",
    "さかえ",
    "さかな",
    "さき",
    "さく",
    "さくら",
    "さけ",
    "さこ",
    "ささ",
    "さち",
    "さつ",
    "さと",
    "さとし",
    "さとる",
    "さま",
    "さむらい",
    "さら",
    "さる",
    "さわ",
    "さん",
    "ざ",
    "ざい",
    "ざつ",
    "ざん",
    "し",
    "しい",
    "しお",
    "しか",
    "しき",
    "しげる",
    "した",
    "しち",
    "しつ",
    "しの",
    "しば",
    "しぶ",
    "しま",
    "しゃ",
    "しゃく",
    "しゅ",
    "しゅう",
    "しゅく",
    "しゅつ",
    "しゅん",
    "しょ",
    "しょう",
    "しょく",
    "しり",
    "しる",
    "しるべ",
    "しろ",
    "しん",
    "じ",
    "じく",
    "じゃ",
    "じゃく",
    "じゅ",
    "じゅう",
    "じゅく",
    "じゅつ",
    "じゅん",
    "じょ",
    "じょう",
    "じょく",
    "じん",
    "す",
    "すい",
    "すう",
    "すえ",
    "すがた",
    "すぎ",
    "すぐる",
    "すけ",
    "すじ",
    "すすむ",
    "すず",
    "すずめ",
    "すな",
    "すみ",
    "すもも",
    "すん",
    "ず",
    "ずい",
    "せ",
    "せい",
    "せき",
    "せつ",
    "せん",
    "ぜい",
    "ぜつ",
    "ぜん",
    "そ",
    "そう",
    "そうろう",
    "そえ",
    "そく",
    "そこ",
    "そつ",
    "そで",
    "そと",
    "その",
    "そめ",
    "そら",
    "そん",
    "ぞう",
    "ぞく",
    "た",
    "たい",
    "たいら",
    "たか",
    "たかし",
    "たから",
    "たき",
    "たく",
    "たくみ",
    "たけ",
    "たけし",
    "たたみ",
    "ただ",
    "ただし",
    "たつ",
    "たて",
    "たな",
    "たに",
    "たね",
    "たび",
    "たま",
    "たまご",
    "たましい",
    "たみ",
    "ため",
    "たる",
    "たわら",
    "たん",
    "だ",
    "だい",
    "だく",
    "だつ",
    "だれ",
    "だん",
    "ち",
    "ちから",
    "ちく",
    "ちち",
    "ちつ",
    "ちゃ",
    "ちゃく",
    "ちゅう",
    "ちょ",
    "ちょう",
    "ちょく",
    "ちん",
    "つ",
    "つい",
    "つう",
    "つか",
    "つかさ",
    "つき",
    "つぎ",
    "つく",
    "つくえ",
    "つじ",
    "つち",
    "つつ",
    "つつみ",
    "つづみ",
    "つとむ",
    "つな",
    "つね",
    "つばき",
    "つばさ",
    "つぶ",
    "つぼ",
    "つま",
    "つみ",
    "つめ",
    "つゆ",
    "つよし",
    "つり",
    "つる",
    "つるぎ",
    "て",
    "てい",
    "てき",
    "てつ",
    "てのひら",
    "てら",
    "てる",
    "てん",
    "でん",
    "と",
    "とう",
    "とうげ",
    "とうる",
    "とおり",
    "とおる",
    "とき",
    "とく",
    "とげ",
    "とこ",
    "ところ",
    "とし",
    "とち",
    "とつ",
    "とどけ",
    "となり",
    "とびら",
    "とみ",
    "とも",
    "ともしび",
    "とら",
    "とり",
    "とりこ",
    "とん",
    "ど",
    "どう",
    "どく",
    "どの",
    "どろ",
    "どん",
    "な",
    "ない",
    "なえ",
    "なか",
    "なし",
    "なだ",
    "なつ",
    "など",
    "なに",
    "なべ",
    "なま",
    "なまり",
    "なみ",
    "なみだ",
    "なわ",
    "なん",
    "に",
    "にく",
    "にし",
    "にしき",
    "にせ",
    "にち",
    "にゅう",
    "にょう",
    "にわ",
    "にわとり",
    "にん",
    "ぬの",
    "ぬま",
    "ぬり",
    "ね",
    "ねい",
    "ねこ",
    "ねつ",
    "ねん",
    "の",
    "のう",
    "のち",
    "のぼる",
    "のり",
    "は",
    "はい",
    "はか",
    "はぎ",
    "はく",
    "はこ",
    "はし",
    "はしら",
    "はじ",
    "はじめ",
    "はす",
    "はた",
    "はたけ",
    "はだ",
    "はだか",
    "はち",
    "はつ",
    "はと",
    "はな",
    "はなし",
    "はね",
    "はは",
    "はば",
    "はま",
    "はやし",
    "はら",
    "はり",
    "はる",
    "はん",
    "ば",
    "ばい",
    "ばく",
    "ばつ",
    "ばん",
    "ひ",
    "ひかえ",
    "ひかり",
    "ひがし",
    "ひき",
    "ひこ",
    "ひさし",
    "ひし",
    "ひじり",
    "ひたい",
    "ひだり",
    "ひつ",
    "ひつじ",
    "ひとし",
    "ひま",
    "ひめ",
    "ひゃく",
    "ひょう",
    "ひる",
    "ひろし",
    "ひん",
    "び",
    "びょう",
    "びん",
    "ふ",
    "ふう",
    "ふえ",
    "ふく",
    "ふくろ",
    "ふし",
    "ふじ",
    "ふち",
    "ふつ",
    "ふで",
    "ふところ",
    "ふね",
    "ふゆ",
    "ふん",
    "ぶ",
    "ぶた",
    "ぶん",
    "へい",
    "へび",
    "へり",
    "へん",
    "べつ",
    "べん",
    "ほ",
    "ほう",
    "ほか",
    "ほこ",
    "ほし",
    "ほとけ",
    "ほど",
    "ほね",
    "ほのお",
    "ほら",
    "ほり",
    "ほろ",
    "ほん",
    "ぼ",
    "ぼう",
    "ぼく",
    "ぼつ",
    "ぼん",
    "ま",
    "まい",
    "まえ",
    "まき",
    "まく",
    "まこと",
    "まご",
    "まさ",
    "ます",
    "また",
    "まち",
    "まつ",
    "まつり",
    "まつりごと",
    "まど",
    "まぼろし",
    "まめ",
    "まもる",
    "まる",
    "まれ",
    "まん",
    "み",
    "みかど",
    "みぎ",
    "みこと",
    "みさお",
    "みさき",
    "みず",
    "みずうみ",
    "みせ",
    "みぞ",
    "みち",
    "みつ",
    "みつぐ",
    "みどり",
    "みな",
    "みなと",
    "みなみ",
    "みね",
    "みのる",
    "みみ",
    "みゃく",
    "みや",
    "みやこ",
    "みょう",
    "みん",
    "む",
    "むかし",
    "むぎ",
    "むし",
    "むすめ",
    "むつみ",
    "むね",
    "むら",
    "むらさき",
    "め",
    "めい",
    "めぐみ",
    "めし",
    "めす",
    "めつ",
    "めん",
    "も",
    "もう",
    "もく",
    "もと",
    "もの",
    "もも",
    "もり",
    "もん",
    "や",
    "やから",
    "やき",
    "やく",
    "やす",
    "やすし",
    "やつ",
    "やど",
    "やなぎ",
    "やま",
    "やみ",
    "ゆ",
    "ゆう",
    "ゆえ",
    "ゆき",
    "ゆずる",
    "ゆたか",
    "ゆび",
    "ゆみ",
    "ゆめ",
    "よ",
    "よう",
    "よく",
    "よこ",
    "よし",
    "よど",
    "よめ",
    "より",
    "よる",
    "ら",
    "らい",
    "らく",
    "らん",
    "り",
    "りく",
    "りつ",
    "りゃく",
    "りゅう",
    "りょ",
    "りょう",
    "りん",
    "るい",
    "れい",
    "れき",
    "れつ",
    "れん",
    "ろ",
    "ろう",
    "ろく",
    "ろん",
    "わ",
    "わい",
    "わき",
    "わく",
    "わけ",
    "わざ",
    "わし",
    "わたし",
    "わたり",
    "わたる",
    "わらい",
    "わらべ",
    "わり",
    "われ",
    "わん",
]

# 按音节数排序：单音节在前，多音节在后
sorted_readings = sorted(
    all_readings,
    key=lambda x: (len(x) > 1, x),  # 先按是否多音节排序，再按假名顺序
)


def get_hiragana_kanji(target_hiragana, fitter="N1"):
    # 目标五十音 target_hiragana = "たみ"

    # 存储匹配的汉字
    matching_kanji = []

    # 解析 KanjiDic2 文件
    tree = ET.parse(f"{current_dir}/data/kanjidic2.xml")  # 替换为实际文件路径
    root = tree.getroot()

    for character in root.findall("character"):
        kanji = character.find("literal").text  # 汉字
        readings = []

        # 提取音读（on_reading）和训读（kun_reading）
        for reading in character.findall("reading_meaning/rmgroup/reading"):
            r_type = reading.get("r_type")
            if r_type in ["ja_on", "ja_kun"]:  # 音读或训读
                reading_text = reading.text
                # 转换为平假名
                reading_hira = (
                    jaconv.kata2hira(reading_text)
                    if r_type == "ja_on"
                    else reading_text.split(".")[0]
                )
                readings.append(reading_hira)

        # 检查是否包含目标五十音
        if target_hiragana in readings:
            matching_kanji.append(kanji)

    if fitter in ["N1", "N2", "N3", "N4", "N5"]:
        # 如果是合法的平假名，则返回对应的汉字
        word_data = way3.read_file(f"{current_dir}/data/jlpt_kanji_lists.json").content
        use_data = json.loads(word_data).get(fitter)
        matching_kanji = list(set(use_data) & set(matching_kanji))

    print(f"五十音 '{target_hiragana}' 对应的汉字：{matching_kanji}")
    return matching_kanji


for reading in all_readings:
    get_hiragana_kanji(reading)
